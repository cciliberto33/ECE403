#include <Wire.h>
#include <Adafruit_MCP4725.h>
Adafruit_MCP4725 dac;
int OutputSig = A5;
int set = 0;

double output = 0;
double Setpoint = 819;
double error = 0;
double dacout = 0;
double Kp = 15.0;
double Ki = 0.0;
double Kd = 0.0;
double dt = 1.0/8000.0;
double epsilon = 0.001;
double integral = 0;
double pre_error = 0;
double MIN = 0;
double MAX = 4095;
double derivative = 0;
int secondcounter = 0;

void setup(void) {
  pinMode(OutputSig, INPUT);
  dac.begin(0x62);
  Wire.setClock(400000);
  
//   Set no interrupts
  cli();
  // Set timer2 for 8 kHz
  TCCR2A = 0;// set entire TCCR2A register to 0
  TCCR2B = 0;// same for TCCR2B
  TCNT2  = 0;//initialize counter value to 0
  // set compare match register for 8khz increments
  OCR2A = 249;// = (16*10^6) / (8000*8) - 1 (must be <256)
  // turn on CTC mode
  TCCR2A |= (1 << WGM21);
  // Set CS21 bit for 8 prescaler
  TCCR2B |= (1 << CS21);
  // enable timer compare interrupt
  TIMSK2 |= (1 << OCIE2A);
  sei();
  dac.setVoltage(0,false);
  delay(1000);
  Serial.begin(19200);
}

void loop(void) {
  if (set){
    // Make the measurement, calculate the error.
    output = analogRead(OutputSig)*4;
    error = Setpoint - output;

    // If the error is greater than a very small value, add the error's area to the integral term.
    if (abs(error) > epsilon){
      integral = integral + error*dt;
    }

    // Take the difference in error and divide by the period of our sampler (0.000125 or 1/8000 sec)
    derivative = (error - pre_error)/dt; 

    //Add Kp*Error (proportional) + Ki*Integral (integral) + Kd*derivative (derivative)
    dacout = Kp*error + Ki*integral + Kd*derivative;

    //Saturation conditions for the DAC. If the DAC output exceeds the max value it can output (4095)
    //then the DAC output is 4095. If it is less than 0, it outputs 0.
    
    if (dacout > MAX){
      dacout = MAX;
    } else if(dacout < MIN){
      dacout = MIN;
    }
    
    pre_error = error;
    dac.setVoltage(dacout, false);
    set = 0;
  }
}

ISR(TIMER2_COMPA_vect){
  set++;
}
